package got

import (
	"bytes"
	"fmt"
	"github.com/goradd/gofile/pkg/sys"
	"github.com/goradd/got/got"
	"io"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

var modules map[string]string
var includePaths []string
var includeNamedBlocks map[string]namedBlockEntry

func Run(outDir string,
	typ string,
	runImports bool,
	includes string,
	inputDirectory string,
	files []string) int {

	var includeFiles []string

	var err error
	if modules, err = sys.ModulePaths(); err != nil {
		panic(err)
	}

	if includes != "" {
		for includes != "" {
			var cur string
			if offset := strings.IndexAny(includes, ":;"); offset != -1 {
				cur = includes[:offset]
				includes = includes[offset+1:]
			} else {
				cur = includes
				includes = ""
			}
			p := getRealPath(cur)
			if fi, err := os.Stat(p); err != nil {
				fmt.Println("Include path " + p + " does not exist.")
			} else if fi.IsDir() {
				includePaths = append(includePaths, p)
			} else {
				includeFiles = append(includeFiles, p)
			}
		}
	}

	if inputDirectory != "" {
		inputDirectory = getRealPath(inputDirectory)
		if inputDirectory[len(inputDirectory)-1] != filepath.Separator {
			inputDirectory += string(filepath.Separator)
		}
	}

	if inputDirectory == "" {
		includePaths = append(includePaths, getRealPath("."))
	} else {
		includePaths = append(includePaths, inputDirectory)
	}

	if outDir == "" {
		if outDir, err = os.Getwd(); err != nil {
			panic("Could not use the current directory as the output directory.")
		}
	}
	outDir = getRealPath(outDir)

	dstInfo, err := os.Stat(outDir)
	if err != nil {
		panic(fmt.Sprintf("The output directory %s does not exist. Create the output directory and run it again.", outDir))
	}

	if !dstInfo.Mode().IsDir() {
		panic("The output directory specified is not a directory")
	}


	//var err error

	if typ != "" {
		files, _ = filepath.Glob(inputDirectory + "*." + typ)
	}

	asts := prepIncludeFiles(includeFiles)

	var files2 []string
	for _, file := range files {
		newPath := outfilePath(file, outDir)
		tree := buildAst(file)
		if tree != nil {
			var asts2 []*astType
			asts2 = append(asts2, asts...)
			asts2 = append(asts2, tree)

			// duplicate the named blocks from the include files in case the previous file added to them
			useNamedBlocks(includeNamedBlocks)
			runAsts(newPath, asts2...)
			files2 = append(files2, newPath)
		}
	}

	// Since go typically does io asynchronously, we run our second stage after some pause to let the writes finish
	for _, file := range files2 {
		postProcess(file, runImports)
	}

}

func prepIncludeFiles(includes []string) (asts []*astType) {
	for _, f := range includes {
		tree := buildAst(f)
		if tree != nil {
			asts = append(asts, tree)
		}
	}
	includeNamedBlocks = getNamedBlocks()
	return
}

func getRealPath(path string) string {
	newPath, err := sys.GetModulePath(path, modules)
	if err != nil {
		log.Fatal(err)
	}
	return newPath
}

// processFile will process one got file, converting it to a go file.
func processFile(inFile string, outFile string) bool {
	var readers []io.Reader

	for _, f := range includeFiles {
		file, err := os.Open(f)
		if err != nil {
			_,_ = fmt.Fprintln(os.Stderr, "Include file " + f + " error: " + err.Error())
			return false
		}
		defer func() {
			_ = file.Close()
		}()
		readers = append(readers, file)
	}

	f, err := os.Open(inFile)
	if err != nil {
		_,_ = fmt.Fprintln(os.Stderr, "Could not open GoT file " + inFile + " error: " + err.Error())
		return false
	}
	defer func() {
		_ = f.Close()
	}()

	readers = append(readers, f)

	r := io.MultiReader(readers...)
	var buf bytes.Buffer

	processTemplate(inFile, r, &buf)
	if buf.Len() > 0 {
		f,err = os.Create(outFile)
		if err != nil {
			_,_ = fmt.Fprintln(os.Stderr, "Could not open output file " + outFile + " error: " + err.Error())
			return false
		}
		defer func() {
			_ = f.Close()
		}()

		_,err = f.WriteString("//** This file was code generated by got. DO NOT EDIT. ***\n\n\n")
		if err != nil {
			_,_ = fmt.Fprintln(os.Stderr, "Could not write to output file " + outFile + " error: " + err.Error())
			return false
		}
		_,err = f.Write(buf.Bytes())
		if err != nil {
			_,_ = fmt.Fprintln(os.Stderr, "Could not write to output file " + outFile + " error: " + err.Error())
			return false
		}
		return true
	}
	return false
}

func outfilePath(file string, outDir string) string {
	dir := filepath.Dir(file)
	dir, _ = filepath.Abs(dir)
	file = filepath.Base(file)

	i := strings.LastIndex(file, ".")

	if i < 0 {
		file = file + ".go"
	} else {
		file = file[:i] + ".go"
	}

	if outDir != "" {
		dir = outDir
	}

	file = filepath.Join(dir, file)
	return file
}


func postProcess(file string, runImports bool) {
	curDir, _ := os.Getwd()
	dir := filepath.Dir(file)
	_ = os.Chdir(dir) // run it from the file's directory to pick up the correct go.mod file if there is one
	if runImports {
		_, err := sys.ExecuteShellCommand("goimports -w " + filepath.Base(file))
		if err != nil {
			if e, ok := err.(*exec.Error); ok {
				panic("error running goimports on file " + file + ": " + e.Error()) // perhaps goimports is not installed?
			} else if e, ok := err.(*exec.ExitError); ok {
				// Likely a syntax error in the resulting file
				log.Print(string(e.Stderr))
			}
		}
	} else {
		_, err := sys.ExecuteShellCommand("go fmt " + file) // at least format it if we are not going to run imports on it
		if err != nil {
			if e, ok := err.(*exec.Error); ok {
				panic("error running goimports on file " + file + ": " + e.Error()) // perhaps goimports is not installed?
			} else if e, ok := err.(*exec.ExitError); ok {
				// Likely a syntax error in the resulting file
				log.Print(string(e.Stderr))
			}
		}
	}
	_ = os.Chdir(curDir)
}

// processTemplate processes a single template string, sending the output to the writer
//
// fileName is given here so we can report errors.
func processTemplate(fileName string) string {
	l := lex(fileName)

	s := got.Parse(l)

	return s
}
